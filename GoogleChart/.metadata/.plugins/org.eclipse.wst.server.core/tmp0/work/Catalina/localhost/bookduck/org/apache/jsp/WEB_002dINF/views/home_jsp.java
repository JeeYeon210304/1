/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.41
 * Generated at: 2021-06-23 14:33:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class home_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("jar:file:/C:/Workspaces/GoogleChart/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/googleChart/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1618895684627L));
    _jspx_dependants.put("jar:file:/C:/Workspaces/GoogleChart/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/googleChart/WEB-INF/lib/jstl-1.2.jar!/META-INF/fn.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("\r\n");
      out.write("\t<script  src=\"http://code.jquery.com/jquery-latest.min.js\"></script>\r\n");
      out.write("\t<!-- 구글차트 GoogleChart -->\r\n");
      out.write("\t<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>\r\n");
      out.write("    <script type=\"text/javascript\">\r\n");
      out.write("    \r\n");
      out.write("    // controller에서 json으로 넘겼으니까 여기 받는 부분만 어떻게 해보면 될 것 같음.\r\n");
      out.write("/*\r\n");
      out.write("    $(document).ready(function(){\r\n");
      out.write("    \tdrawChart();\r\n");
      out.write("\t});\t\r\n");
      out.write("  */  \r\n");
      out.write("    google.charts.load('current', {'packages':['corechart']});\r\n");
      out.write("    google.charts.setOnLoadCallback(drawChart);\r\n");
      out.write("\r\n");
      out.write("      function drawChart() {\r\n");
      out.write("    \t  var jsonData = $.ajax({\r\n");
      out.write("    \t\t  \r\n");
      out.write("    \t\t  // 여기 url이 잘못된 것 같음!!!!\r\n");
      out.write("    \t\t  \r\n");
      out.write("    \t\t  url: \"chartData.do\",\r\n");
      out.write("    \t\t  data: \"chartId=admin\",\r\n");
      out.write("    \t\t  dataType:\"json\",\r\n");
      out.write("    \t\t  async: false\r\n");
      out.write("    \t\t}).responseText;\r\n");
      out.write("\r\n");
      out.write("    \t  var stringJson = JSON.parse(jsonData);\r\n");
      out.write("    \t  \r\n");
      out.write("    \t  console.log(jsonData);\r\n");
      out.write("    \t  console.log(typeof(jsonData));\r\n");
      out.write("    \t  console.log(stringJson.map[0].chartMdate);\r\n");
      out.write("    \t  console.log(typeof(stringJson));\r\n");
      out.write("    \t  console.log(stringJson.map[0].chartreadingtime);\r\n");
      out.write("    \t  \r\n");
      out.write("    \t  \r\n");
      out.write("    \t  var data = new google.visualization.DataTable();\r\n");
      out.write("    \t  data.addColumn('string', 'chartMdate');\r\n");
      out.write("    \t  data.addColumn('number', 'chartreadingtime');\r\n");
      out.write("    \t  \r\n");
      out.write("    \t  var dataArray = [];\r\n");
      out.write("    \t  for(var i = 0; i < stringJson.map.length; i++){\r\n");
      out.write("\t\t\t\tdataArray.push([stringJson.map[i].chartMdate, Number(stringJson.map[i].chartreadingtime)]);\r\n");
      out.write("\t\t\t};\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tdata.addRows(dataArray);\r\n");
      out.write("    \t  \r\n");
      out.write("\t\t/* \r\n");
      out.write("    \t  for(var i = 0; i < stringJson.map.length; i++){\r\n");
      out.write("    \t\t  data.addRows([stringJson.map[i].chartMdate, stringJson.map[i].chartreadingtime]);\r\n");
      out.write("    \t  }\r\n");
      out.write("\r\n");
      out.write("\t\t\t\r\n");
      out.write("    \t  \r\n");
      out.write("\t\r\n");
      out.write("    \t  data.addRows([\r\n");
      out.write("    \t\t  [jsonData.map[0].chartMdate],\r\n");
      out.write("    \t\t  [jsonData.map[0].chartreadingtime]\r\n");
      out.write("    \t  ])\r\n");
      out.write("\t\t */\r\n");
      out.write("    \t \r\n");
      out.write("    \t  \r\n");
      out.write("        var options = {\r\n");
      out.write("          title: 'Company Performance',\r\n");
      out.write("          curveType: 'function',\r\n");
      out.write("          legend: { position: 'bottom' }\r\n");
      out.write("        };\r\n");
      out.write("\r\n");
      out.write("        var chart = new google.visualization.LineChart(document.getElementById('curve_chart'));\r\n");
      out.write("\r\n");
      out.write("        chart.draw(data, options);\r\n");
      out.write("      }\r\n");
      out.write("    \r\n");
      out.write("\t\r\n");
      out.write("    </script>\r\n");
      out.write("    \r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<!-- 구글차트 위치-->\r\n");
      out.write("\t<div id=\"curve_chart\" method=\"post\" style=\"width:900px; height:500px\"></div>\r\n");
      out.write("\t\r\n");
      out.write("<!-- 독서량 전달 -->\r\n");
      out.write("\t<p>독서량추가</p>\r\n");
      out.write("\t<form action=\"readingTimeInsert.do\" method=\"post\">\r\n");
      out.write("\t\t<!-- 날짜 -->\r\n");
      out.write("\t\t<input type=\"date\" name=\"chartMdate\" style=\"width:30%\" />\r\n");
      out.write("\t\t<br/>\r\n");
      out.write("\t\t<!-- 독서한 시간(분) -->\r\n");
      out.write("\t\t<input type=\"range\" min=\"1\" max=\"600\" style=\"width:30%\" id=\"chartreadingtime\" name=\"chartreadingtime\" oninput=\"document.getElementById('CRTime').innerHTML=this.value;\">\r\n");
      out.write("\t\t<br/>\r\n");
      out.write("\t\t<span id=\"CRTime\" ></span>분\r\n");
      out.write("\t\t<input type=\"submit\" value=\"등록\" />\r\n");
      out.write("\t</form>\r\n");
      out.write("\t\r\n");
      out.write("\t<input type=\"hidden\" id=\"id\" value=\"admin\" name=\"chartid\" />\r\n");
      out.write("\t\r\n");
      out.write("<!-- \r\n");
      out.write("\t구글 API 샘플\r\n");
      out.write("\t\r\n");
      out.write("\tgoogle.charts.load('current', {'packages':['corechart']});\r\n");
      out.write("      google.charts.setOnLoadCallback(drawChart);\r\n");
      out.write("\r\n");
      out.write("      function drawChart() {\r\n");
      out.write("        var data = google.visualization.arrayToDataTable([\r\n");
      out.write("          ['Year', 'Sales', 'Expenses'],\r\n");
      out.write("          ['2004',  1000,      400],\r\n");
      out.write("          ['2005',  1170,      460],\r\n");
      out.write("          ['2006',  660,       1120],\r\n");
      out.write("          ['2007',  1030,      540]\r\n");
      out.write("        ]);\r\n");
      out.write("\r\n");
      out.write("        var options = {\r\n");
      out.write("          title: 'Company Performance',\r\n");
      out.write("          curveType: 'function',\r\n");
      out.write("          legend: { position: 'bottom' }\r\n");
      out.write("        };\r\n");
      out.write("\r\n");
      out.write("        var chart = new google.visualization.LineChart(document.getElementById('curve_chart'));\r\n");
      out.write("\r\n");
      out.write("        chart.draw(data, options);\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write(" -->\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
